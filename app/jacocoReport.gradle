task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    group = "Jacoco Coverage Report"
    description = "Generating the global jacoco coverage report including both unit and connected test cases."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/BR.*',
            '**/R.*',
            '**/R$*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_MembersInjector.*',
            '**/Dagger*Component.*',
            '**/Dagger*Component$Builder.*',
            '**/*Module_*Factory.*',
            '**/*Fragment*.*',
            '**/*Activity*.*',
            '**/*Adapter*.*',
            '**/*ViewPager*.*',
            '**/*ViewHolder*.*',
            '**/*Module*.*',
            '**/*Test*.*',
            'android/**/*.*']

    def javaClasses = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

    getSourceDirectories().setFrom(files([
            "$project.projectDir/src/main/java",
            "$project.projectDir/src/debug/java",
            "$project.projectDir/src/main/kotlin",
            "$project.projectDir/src/debug/kotlin"
    ]))

    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*.ec'
    ]))

}